/**
 * generated by Xtext 2.30.0
 */
package kit.mdsd.xtext.dsl.generator;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import metaModel.viewType.NamedElement;
import metaModel.viewType.repository.BooleanType;
import metaModel.viewType.repository.CharType;
import metaModel.viewType.repository.FloatType;
import metaModel.viewType.repository.IntType;
import metaModel.viewType.repository.Interface;
import metaModel.viewType.repository.LongType;
import metaModel.viewType.repository.Parameter;
import metaModel.viewType.repository.Signature;
import metaModel.viewType.repository.StringType;
import metaModel.viewType.repository.Type;
import metaModel.viewType.repository.VoidType;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  private final String JAVA_SUFFIX = ".java";

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Interface> _filter = Iterables.<Interface>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Interface.class);
    for (final Interface interface_ : _filter) {
      String _replace = this.getPackage(interface_).replace(".", "/");
      String _plus = (_replace + "/");
      String _name = interface_.getName();
      String _plus_1 = (_plus + _name);
      String _plus_2 = (_plus_1 + this.JAVA_SUFFIX);
      fsa.generateFile(_plus_2, this.compile(interface_));
    }
  }

  public CharSequence compile(final Interface interfaceElement) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _package = this.getPackage(interfaceElement);
    _builder.append(_package);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _name = interfaceElement.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Signature> _signatures = interfaceElement.getSignatures();
      for(final Signature signature : _signatures) {
        _builder.append("\t");
        CharSequence _compile = this.compile(signature);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compile(final Signature signature) {
    StringConcatenation _builder = new StringConcatenation();
    String _type = this.getType(signature.getReturnType());
    _builder.append(_type);
    _builder.append(" ");
    String _name = signature.getName();
    _builder.append(_name);
    _builder.append(" (");
    String _parameters = this.getParameters(signature.getParameters());
    _builder.append(_parameters);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public String getPackage(final EObject object) {
    String result = "";
    EObject element = object.eContainer();
    while ((element != null)) {
      {
        if ((element instanceof NamedElement)) {
          result = this.addSegment(result, ((NamedElement)element).getName());
        } else {
          result = this.addSegment(result, element.eClass().getName());
        }
        element = element.eContainer();
      }
    }
    String _lowerCase = this.reversePackage(result).toLowerCase();
    return ((String) _lowerCase);
  }

  public String addSegment(final String packageElement, final String segment) {
    String result = packageElement;
    if (((segment != null) && (!segment.isBlank()))) {
      boolean _isEmpty = result.isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        String _result = result;
        result = (_result + ".");
      }
      String _result_1 = result;
      String _trim = segment.trim();
      result = (_result_1 + _trim);
    }
    return result;
  }

  public String reversePackage(final String name) {
    List<String> elements = Arrays.<String>asList(name.split("\\."));
    Collections.reverse(elements);
    return IterableExtensions.join(elements, ".");
  }

  public String getType(final Type type) {
    if ((type instanceof StringType)) {
      return "String";
    } else {
      if ((type instanceof VoidType)) {
        return "void";
      } else {
        if ((type instanceof BooleanType)) {
          return "boolean";
        } else {
          if ((type instanceof IntType)) {
            return "int";
          } else {
            if ((type instanceof FloatType)) {
              return "float";
            } else {
              if ((type instanceof LongType)) {
                return "long";
              } else {
                if ((type instanceof CharType)) {
                  return "char";
                }
              }
            }
          }
        }
      }
    }
    return "undefinedType";
  }

  public String getParameters(final EList<Parameter> parameters) {
    String result = "";
    for (int i = 0; (i < parameters.size()); i++) {
      {
        String _result = result;
        String _type = this.getType(parameters.get(i).getType());
        String _plus = (_type + " ");
        String _name = parameters.get(i).getName();
        String _plus_1 = (_plus + _name);
        result = (_result + _plus_1);
        int _size = parameters.size();
        boolean _lessThan = ((i + 1) < _size);
        if (_lessThan) {
          String _result_1 = result;
          result = (_result_1 + ", ");
        }
      }
    }
    return result;
  }
}
