/**
 * generated by Xtext 2.30.0
 */
package kit.mdsd.xtext.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import kit.mdsd.xtext.dsl.services.DslGrammarAccess;
import metaModel.ComponentBasedSystem;
import metaModel.viewType.allocation.AllocationContext;
import metaModel.viewType.environment.Enivronment;
import metaModel.viewType.repository.Component;
import metaModel.viewType.repository.Interface;
import metaModel.viewType.repository.Repository;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DslGrammarAccess _dslGrammarAccess;

  protected void _format(final ComponentBasedSystem componentBasedSystem, @Extension final IFormattableDocument document) {
    EList<Repository> _repositories = componentBasedSystem.getRepositories();
    for (final Repository repository : _repositories) {
      document.<Repository>format(repository);
    }
    EList<Enivronment> _enivronments = componentBasedSystem.getEnivronments();
    for (final Enivronment enivronment : _enivronments) {
      document.<Enivronment>format(enivronment);
    }
    EList<metaModel.viewType.assembly.System> _systems = componentBasedSystem.getSystems();
    for (final metaModel.viewType.assembly.System system : _systems) {
      document.<metaModel.viewType.assembly.System>format(system);
    }
    EList<AllocationContext> _allocationContexts = componentBasedSystem.getAllocationContexts();
    for (final AllocationContext allocationContext : _allocationContexts) {
      document.<AllocationContext>format(allocationContext);
    }
  }

  protected void _format(final Repository repository, @Extension final IFormattableDocument document) {
    EList<Component> _components = repository.getComponents();
    for (final Component component : _components) {
      document.<Component>format(component);
    }
    EList<Interface> _interface = repository.getInterface();
    for (final Interface _interface_1 : _interface) {
      document.<Interface>format(_interface_1);
    }
  }

  public void format(final Object componentBasedSystem, final IFormattableDocument document) {
    if (componentBasedSystem instanceof XtextResource) {
      _format((XtextResource)componentBasedSystem, document);
      return;
    } else if (componentBasedSystem instanceof ComponentBasedSystem) {
      _format((ComponentBasedSystem)componentBasedSystem, document);
      return;
    } else if (componentBasedSystem instanceof Repository) {
      _format((Repository)componentBasedSystem, document);
      return;
    } else if (componentBasedSystem instanceof EObject) {
      _format((EObject)componentBasedSystem, document);
      return;
    } else if (componentBasedSystem == null) {
      _format((Void)null, document);
      return;
    } else if (componentBasedSystem != null) {
      _format(componentBasedSystem, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(componentBasedSystem, document).toString());
    }
  }
}
