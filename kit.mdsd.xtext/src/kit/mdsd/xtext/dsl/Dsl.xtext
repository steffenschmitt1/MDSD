// automatically generated by Xtext
grammar kit.mdsd.xtext.dsl.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/MDSD/model/metamodel.ecore" as metaModel
import "platform:/resource/MDSD/model/metamodel.ecore#//viewType" as viewType
import "platform:/resource/MDSD/model/metamodel.ecore#//viewType/repository" as repository
import "platform:/resource/MDSD/model/metamodel.ecore#//viewType/environment" as environment
import "platform:/resource/MDSD/model/metamodel.ecore#//viewType/assembly" as assembly
import "platform:/resource/MDSD/model/metamodel.ecore#//viewType/allocation" as allocation

ComponentBasedSystem returns metaModel::ComponentBasedSystem:
	{metaModel::ComponentBasedSystem}
	'ComponentBasedSystem'
	'{'
		('repositories' '{' repositories+=Repository ( "," repositories+=Repository)* '}' )?
		('environments' '{' environments+=Environment ( "," environments+=Environment)* '}' )?
		('systems' '{' systems+=System ( "," systems+=System)* '}' )?
		('allocationContexts' '{' allocationContexts+=AllocationContext ( "," allocationContexts+=AllocationContext)* '}' )?
	'}';










DelegationConnector returns assembly::DelegationConnector:
	DelegationConnectorRequired | DelegationConnectorProvided;








Type returns repository::Type:
	ComplexType | MapType | StringType | BooleanType | IntType | ListType | DateType | LongType | FloatType | CharType | VoidType;


ParameterType returns repository::ParameterType:
	ComplexType | MapType | StringType | BooleanType | IntType | ListType | DateType | LongType | FloatType | CharType;





Repository returns repository::Repository:
	{repository::Repository}
	'Repository'
	name=EString
	'{'
		('components' '{' components+=Component ( "," components+=Component)* '}' )?
		('interfaces' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
	'}';

Environment returns environment::Environment:
	{environment::Environment}
	'Environment'
	'{'
		('containers' '{' containers+=Container ( "," containers+=Container)* '}' )?
		('links' '{' links+=Link ( "," links+=Link)* '}' )?
	'}';

System returns assembly::System:
	'System'
	'{'
		'provides' '(' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* ')' 
		'encapsulatedInstances' '{' encapsulatedInstances+=AssemblyContext ( "," encapsulatedInstances+=AssemblyContext)* '}' 
		('delegationConnectors' '{' delegationConnectors+=DelegationConnector ( "," delegationConnectors+=DelegationConnector)* '}' )?
		('assemblyConnectors' '{' assemblyConnectors+=AssemblyConnector ( "," assemblyConnectors+=AssemblyConnector)* '}' )?
	'}';

AllocationContext returns allocation::AllocationContext:
	'AllocationContext'
	name=EString
	'{'
		'assemblyContext' assemblyContext=[assembly::AssemblyContext|EString]
		'container' container=[environment::Container|EString]
	'}';

Component returns repository::Component:
    {repository::Component}
    'Component'
    name=EString
    '{'
        ('requires' '(' requires+=[repository::Interface|EString] ( "," requires+=[repository::Interface|EString])* ')' )?
        ('provides' '(' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* ')' )?
        ('description' description=BehaviourDescription)?
    '}' | CompositeComponent;
	
	
CompositeComponent returns assembly::CompositeComponent:
	{assembly::CompositeComponent}
	'CompositeComponent'
	name=EString
	'{'
		('requires' '(' requires+=[repository::Interface|EString] ( "," requires+=[repository::Interface|EString])* ')' )?
		('provides' '(' provides+=[repository::Interface|EString] ( "," provides+=[repository::Interface|EString])* ')' )?
		('description' description=BehaviourDescription)?
        ('encapsulatedInstances' '(' encapsulatedInstances+=[assembly::AssemblyContext|EString] ( "," encapsulatedInstances+=[assembly::AssemblyContext|EString])* ')')?
	'}';

Interface returns repository::Interface:
	{repository::Interface}
	'Interface'
	name=EString
	'{'
		('signatures' '{' signatures+=Signature ( "," signatures+=Signature)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

BehaviourDescription returns repository::BehaviourDescription:
	{repository::BehaviourDescription}
	'BehaviourDescription'
	'{'
		('internalActions' '{' internalActions+=InternalAction ( "," internalActions+=InternalAction)* '}' )?
		('externalCalls' '{' externalCalls+=ExternalCall ( "," externalCalls+=ExternalCall)* '}' )?
		('loops' '{' loops+=Loop ( "," loops+=Loop)* '}' )?
		('branches' '{' branches+=Branch ( "," branches+=Branch)* '}' )?
	'}';

InternalAction returns repository::InternalAction:
	{repository::InternalAction}
	'InternalAction'
	;

ExternalCall returns repository::ExternalCall:
	{repository::ExternalCall}
	'ExternalCall'
	;

Loop returns repository::Loop:
	{repository::Loop}
	'Loop'
	;

Branch returns repository::Branch:
	{repository::Branch}
	'Branch'
	;

Signature returns repository::Signature:
	'Signature'
	name=EString
	'{'
		'returnType' returnType=Type
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter returns repository::Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=ParameterType
	'}';

ComplexType returns repository::ComplexType:
	'ComplexType'
	'{'
		'types' '{' types+=ParameterType ( "," types+=ParameterType)* '}' 
	'}';

MapType returns repository::MapType:
	{repository::MapType}
	'MapType'
	;

StringType returns repository::StringType:
	{repository::StringType}
	'StringType'
	'{'
		('type' type=EString)?
	'}';

BooleanType returns repository::BooleanType:
	{repository::BooleanType}
	(type?='type')?
	'BooleanType'
	;

IntType returns repository::IntType:
	{repository::IntType}
	'IntType'
	'{'
		('type' type=EIntegerObject)?
	'}';

ListType returns repository::ListType:
	{repository::ListType}
	'ListType'
	;

DateType returns repository::DateType:
	'DateType'
	'{'
		'type' type=EDate
	'}';

LongType returns repository::LongType:
	'LongType'
	'{'
		'type' type=ELongObject
	'}';

FloatType returns repository::FloatType:
	'FloatType'
	'{'
		'type' type=EFloatObject
	'}';

CharType returns repository::CharType:
	'CharType'
	'{'
		'type' type=ECharacterObject
	'}';

VoidType returns repository::VoidType:
	{repository::VoidType}
	'VoidType'
	;

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

EIntegerObject returns ecore::EIntegerObject:
	'-'? INT;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

ELongObject returns ecore::ELongObject:
	'-'? INT;

EFloatObject returns ecore::EFloatObject:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

ECharacterObject returns ecore::ECharacterObject:
	'ECharacterObject' /* TODO: implement this rule and an appropriate IValueConverter */;

Container returns environment::Container:
	{environment::Container}
	'Container'
	name=EString
	'{'
		('allocationContext' '(' allocationContext+=[allocation::AllocationContext|EString] ( "," allocationContext+=[allocation::AllocationContext|EString])* ')' )?
		('links' '(' links+=[environment::Link|EString] ( "," links+=[environment::Link|EString])* ')' )?
	'}';

Link returns environment::Link:
	'Link'
	name=EString
	'{'
		'containers' '(' containers+=[environment::Container|EString] ( "," containers+=[environment::Container|EString])* ')' 
	'}';

AssemblyContext returns assembly::AssemblyContext:
	'AssemblyContext'
	name=EString
	'{'
		'instantiatedComponent' instantiatedComponent=[repository::Component|EString]
		('allocationContext' allocationContext=[allocation::AllocationContext|EString])?
		('requires' '{' requires+=RequiredRole ( "," requires+=RequiredRole)* '}' )?
		('provides' '{' provides+=ProvidedRole ( "," provides+=ProvidedRole)* '}' )?
	'}';

AssemblyConnector returns assembly::AssemblyConnector:
	'AssemblyConnector'
	'{'
		'requiredRole' requiredRole=[assembly::RequiredRole|EString]
		'providedRole' providedRole=[assembly::ProvidedRole|EString]
	'}';

RequiredRole returns assembly::RequiredRole:
	{assembly::RequiredRole}
	'RequiredRole'
	name=EString
	'{'
		('delegationConnector' delegationConnector=[assembly::DelegationConnectorRequired|EString])?
		('assemblyConnector' assemblyConnector=[assembly::AssemblyConnector|EString])?
	'}';

ProvidedRole returns assembly::ProvidedRole:
	{assembly::ProvidedRole}
	'ProvidedRole'
	name=EString
	'{'
		('delegationConnector' delegationConnector=[assembly::DelegationConnectorProvided|EString])?
		('assemblyConnector' assemblyConnector=[assembly::AssemblyConnector|EString])?
	'}';

DelegationConnectorRequired returns assembly::DelegationConnectorRequired:
	'DelegationConnectorRequired'
	'{'
		'linkedInterface' linkedInterface=[repository::Interface|EString]
		'linkedRole' linkedRole=[assembly::RequiredRole|EString]
	'}';

DelegationConnectorProvided returns assembly::DelegationConnectorProvided:
	'DelegationConnectorProvided'
	'{'
		'linkedInterface' linkedInterface=[repository::Interface|EString]
		'linkdedRole' linkedRole=[assembly::ProvidedRole|EString]
	'}';
