/*
 * generated by Xtext 2.30.0
 */
package kit.mdsd.xtext.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import kit.mdsd.xtext.dsl.services.DslGrammarAccess;
import metaModel.ComponentBasedSystem;
import metaModel.MetaModelPackage;
import metaModel.viewType.ViewTypePackage;
import metaModel.viewType.allocation.AllocationContext;
import metaModel.viewType.allocation.AllocationPackage;
import metaModel.viewType.assembly.AssemblyConnector;
import metaModel.viewType.assembly.AssemblyContext;
import metaModel.viewType.assembly.AssemblyPackage;
import metaModel.viewType.assembly.DelegationConnectorProvided;
import metaModel.viewType.assembly.DelegationConnectorRequired;
import metaModel.viewType.assembly.ProvidedRole;
import metaModel.viewType.assembly.RequiredRole;
import metaModel.viewType.environment.Container;
import metaModel.viewType.environment.Enivronment;
import metaModel.viewType.environment.EnvironmentPackage;
import metaModel.viewType.environment.Link;
import metaModel.viewType.repository.BehaviourDescription;
import metaModel.viewType.repository.BooleanType;
import metaModel.viewType.repository.Branch;
import metaModel.viewType.repository.CharType;
import metaModel.viewType.repository.ComplexType;
import metaModel.viewType.repository.Component;
import metaModel.viewType.repository.DateType;
import metaModel.viewType.repository.ExternalCall;
import metaModel.viewType.repository.FloatType;
import metaModel.viewType.repository.IntType;
import metaModel.viewType.repository.Interface;
import metaModel.viewType.repository.InternalAction;
import metaModel.viewType.repository.ListType;
import metaModel.viewType.repository.LongType;
import metaModel.viewType.repository.Loop;
import metaModel.viewType.repository.MapType;
import metaModel.viewType.repository.Repository;
import metaModel.viewType.repository.RepositoryPackage;
import metaModel.viewType.repository.Signature;
import metaModel.viewType.repository.StringType;
import metaModel.viewType.repository.VoidType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AllocationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AllocationPackage.ALLOCATION_CONTEXT:
				sequence_AllocationContext(context, (AllocationContext) semanticObject); 
				return; 
			}
		else if (epackage == AssemblyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AssemblyPackage.ASSEMBLY_CONNECTOR:
				sequence_AssemblyConnector(context, (AssemblyConnector) semanticObject); 
				return; 
			case AssemblyPackage.ASSEMBLY_CONTEXT:
				sequence_AssemblyContext(context, (AssemblyContext) semanticObject); 
				return; 
			case AssemblyPackage.DELEGATION_CONNECTOR_PROVIDED:
				sequence_DelegationConnectorProvided(context, (DelegationConnectorProvided) semanticObject); 
				return; 
			case AssemblyPackage.DELEGATION_CONNECTOR_REQUIRED:
				sequence_DelegationConnectorRequired(context, (DelegationConnectorRequired) semanticObject); 
				return; 
			case AssemblyPackage.PROVIDED_ROLE:
				sequence_ProvidedRole(context, (ProvidedRole) semanticObject); 
				return; 
			case AssemblyPackage.REQUIRED_ROLE:
				sequence_RequiredRole(context, (RequiredRole) semanticObject); 
				return; 
			case AssemblyPackage.SYSTEM:
				sequence_System(context, (metaModel.viewType.assembly.System) semanticObject); 
				return; 
			}
		else if (epackage == EnvironmentPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EnvironmentPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case EnvironmentPackage.ENIVRONMENT:
				sequence_Enivronment(context, (Enivronment) semanticObject); 
				return; 
			case EnvironmentPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			}
		else if (epackage == MetaModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MetaModelPackage.COMPONENT_BASED_SYSTEM:
				sequence_ComponentBasedSystem(context, (ComponentBasedSystem) semanticObject); 
				return; 
			}
		else if (epackage == RepositoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RepositoryPackage.BEHAVIOUR_DESCRIPTION:
				sequence_BehaviourDescription(context, (BehaviourDescription) semanticObject); 
				return; 
			case RepositoryPackage.BOOLEAN_TYPE:
				sequence_BooleanType(context, (BooleanType) semanticObject); 
				return; 
			case RepositoryPackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case RepositoryPackage.CHAR_TYPE:
				sequence_CharType(context, (CharType) semanticObject); 
				return; 
			case RepositoryPackage.COMPLEX_TYPE:
				sequence_ComplexType(context, (ComplexType) semanticObject); 
				return; 
			case RepositoryPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case RepositoryPackage.DATE_TYPE:
				sequence_DateType(context, (DateType) semanticObject); 
				return; 
			case RepositoryPackage.EXTERNAL_CALL:
				sequence_ExternalCall(context, (ExternalCall) semanticObject); 
				return; 
			case RepositoryPackage.FLOAT_TYPE:
				sequence_FloatType(context, (FloatType) semanticObject); 
				return; 
			case RepositoryPackage.INT_TYPE:
				sequence_IntType(context, (IntType) semanticObject); 
				return; 
			case RepositoryPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case RepositoryPackage.INTERNAL_ACTION:
				sequence_InternalAction(context, (InternalAction) semanticObject); 
				return; 
			case RepositoryPackage.LIST_TYPE:
				sequence_ListType(context, (ListType) semanticObject); 
				return; 
			case RepositoryPackage.LONG_TYPE:
				sequence_LongType(context, (LongType) semanticObject); 
				return; 
			case RepositoryPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case RepositoryPackage.MAP_TYPE:
				sequence_MapType(context, (MapType) semanticObject); 
				return; 
			case RepositoryPackage.PARAMETER:
				sequence_Parameter(context, (metaModel.viewType.repository.Parameter) semanticObject); 
				return; 
			case RepositoryPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case RepositoryPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case RepositoryPackage.STRING_TYPE:
				sequence_StringType(context, (StringType) semanticObject); 
				return; 
			case RepositoryPackage.VOID_TYPE:
				sequence_VoidType(context, (VoidType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AllocationContext returns AllocationContext
	 *
	 * Constraint:
	 *     (name=EString assemblyContext=[AssemblyContext|EString] container=[Container|EString])
	 * </pre>
	 */
	protected void sequence_AllocationContext(ISerializationContext context, AllocationContext semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ViewTypePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ViewTypePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, AllocationPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY_CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AllocationPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY_CONTEXT));
			if (transientValues.isValueTransient(semanticObject, AllocationPackage.Literals.ALLOCATION_CONTEXT__CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AllocationPackage.Literals.ALLOCATION_CONTEXT__CONTAINER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAllocationContextAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAllocationContextAccess().getAssemblyContextAssemblyContextEStringParserRuleCall_4_0_1(), semanticObject.eGet(AllocationPackage.Literals.ALLOCATION_CONTEXT__ASSEMBLY_CONTEXT, false));
		feeder.accept(grammarAccess.getAllocationContextAccess().getContainerContainerEStringParserRuleCall_6_0_1(), semanticObject.eGet(AllocationPackage.Literals.ALLOCATION_CONTEXT__CONTAINER, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AssemblyConnector returns AssemblyConnector
	 *
	 * Constraint:
	 *     (requiredRole=[RequiredRole|EString] providedRole=[ProvidedRole|EString])
	 * </pre>
	 */
	protected void sequence_AssemblyConnector(ISerializationContext context, AssemblyConnector semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__REQUIRED_ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__REQUIRED_ROLE));
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__PROVIDED_ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__PROVIDED_ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssemblyConnectorAccess().getRequiredRoleRequiredRoleEStringParserRuleCall_3_0_1(), semanticObject.eGet(AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__REQUIRED_ROLE, false));
		feeder.accept(grammarAccess.getAssemblyConnectorAccess().getProvidedRoleProvidedRoleEStringParserRuleCall_5_0_1(), semanticObject.eGet(AssemblyPackage.Literals.ASSEMBLY_CONNECTOR__PROVIDED_ROLE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AssemblyContext returns AssemblyContext
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         instanceOf=[Component|EString] 
	 *         allocationContext=[AllocationContext|EString]? 
	 *         (requires+=RequiredRole requires+=RequiredRole*)? 
	 *         (provides+=ProvidedRole provides+=ProvidedRole*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_AssemblyContext(ISerializationContext context, AssemblyContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BehaviourDescription returns BehaviourDescription
	 *
	 * Constraint:
	 *     (
	 *         (internalActions+=InternalAction internalActions+=InternalAction*)? 
	 *         (externalCalls+=ExternalCall externalCalls+=ExternalCall*)? 
	 *         (loops+=Loop loops+=Loop*)? 
	 *         (branches+=Branch branches+=Branch*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_BehaviourDescription(ISerializationContext context, BehaviourDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns BooleanType
	 *     ParameterType returns BooleanType
	 *     BooleanType returns BooleanType
	 *
	 * Constraint:
	 *     type?='type'?
	 * </pre>
	 */
	protected void sequence_BooleanType(ISerializationContext context, BooleanType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     {Branch}
	 * </pre>
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns CharType
	 *     ParameterType returns CharType
	 *     CharType returns CharType
	 *
	 * Constraint:
	 *     type=ECharacterObject
	 * </pre>
	 */
	protected void sequence_CharType(ISerializationContext context, CharType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepositoryPackage.Literals.CHAR_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepositoryPackage.Literals.CHAR_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharTypeAccess().getTypeECharacterObjectParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns ComplexType
	 *     ParameterType returns ComplexType
	 *     ComplexType returns ComplexType
	 *
	 * Constraint:
	 *     (types+=ParameterType types+=ParameterType*)
	 * </pre>
	 */
	protected void sequence_ComplexType(ISerializationContext context, ComplexType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentBasedSystem returns ComponentBasedSystem
	 *
	 * Constraint:
	 *     (
	 *         (repositories+=Repository repositories+=Repository*)? 
	 *         (enivronments+=Enivronment enivronments+=Enivronment*)? 
	 *         (systems+=System systems+=System*)? 
	 *         (allocationContexts+=AllocationContext allocationContexts+=AllocationContext*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_ComponentBasedSystem(ISerializationContext context, ComponentBasedSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (requires+=[Interface|EString] requires+=[Interface|EString]*)? 
	 *         (provides+=[Interface|EString] provides+=[Interface|EString]*)? 
	 *         description=BehaviourDescription?
	 *     )
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (allocationContext+=[AllocationContext|EString] allocationContext+=[AllocationContext|EString]*)? 
	 *         (links+=[Link|EString] links+=[Link|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns DateType
	 *     ParameterType returns DateType
	 *     DateType returns DateType
	 *
	 * Constraint:
	 *     type=EDate
	 * </pre>
	 */
	protected void sequence_DateType(ISerializationContext context, DateType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepositoryPackage.Literals.DATE_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepositoryPackage.Literals.DATE_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDateTypeAccess().getTypeEDateParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DelegationConnector returns DelegationConnectorProvided
	 *     DelegationConnectorProvided returns DelegationConnectorProvided
	 *
	 * Constraint:
	 *     (linkedInterface=[Interface|EString] linkdedRole=[ProvidedRole|EString])
	 * </pre>
	 */
	protected void sequence_DelegationConnectorProvided(ISerializationContext context, DelegationConnectorProvided semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE));
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR_PROVIDED__LINKDED_ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR_PROVIDED__LINKDED_ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelegationConnectorProvidedAccess().getLinkedInterfaceInterfaceEStringParserRuleCall_3_0_1(), semanticObject.eGet(AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE, false));
		feeder.accept(grammarAccess.getDelegationConnectorProvidedAccess().getLinkdedRoleProvidedRoleEStringParserRuleCall_5_0_1(), semanticObject.eGet(AssemblyPackage.Literals.DELEGATION_CONNECTOR_PROVIDED__LINKDED_ROLE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DelegationConnector returns DelegationConnectorRequired
	 *     DelegationConnectorRequired returns DelegationConnectorRequired
	 *
	 * Constraint:
	 *     (linkedInterface=[Interface|EString] linkedRole=[RequiredRole|EString])
	 * </pre>
	 */
	protected void sequence_DelegationConnectorRequired(ISerializationContext context, DelegationConnectorRequired semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE));
			if (transientValues.isValueTransient(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR_REQUIRED__LINKED_ROLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssemblyPackage.Literals.DELEGATION_CONNECTOR_REQUIRED__LINKED_ROLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDelegationConnectorRequiredAccess().getLinkedInterfaceInterfaceEStringParserRuleCall_3_0_1(), semanticObject.eGet(AssemblyPackage.Literals.DELEGATION_CONNECTOR__LINKED_INTERFACE, false));
		feeder.accept(grammarAccess.getDelegationConnectorRequiredAccess().getLinkedRoleRequiredRoleEStringParserRuleCall_5_0_1(), semanticObject.eGet(AssemblyPackage.Literals.DELEGATION_CONNECTOR_REQUIRED__LINKED_ROLE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Enivronment returns Enivronment
	 *
	 * Constraint:
	 *     ((container+=Container container+=Container*)? (link+=Link link+=Link*)?)
	 * </pre>
	 */
	protected void sequence_Enivronment(ISerializationContext context, Enivronment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExternalCall returns ExternalCall
	 *
	 * Constraint:
	 *     {ExternalCall}
	 * </pre>
	 */
	protected void sequence_ExternalCall(ISerializationContext context, ExternalCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns FloatType
	 *     ParameterType returns FloatType
	 *     FloatType returns FloatType
	 *
	 * Constraint:
	 *     type=EFloatObject
	 * </pre>
	 */
	protected void sequence_FloatType(ISerializationContext context, FloatType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepositoryPackage.Literals.FLOAT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepositoryPackage.Literals.FLOAT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFloatTypeAccess().getTypeEFloatObjectParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns IntType
	 *     ParameterType returns IntType
	 *     IntType returns IntType
	 *
	 * Constraint:
	 *     type=EIntegerObject?
	 * </pre>
	 */
	protected void sequence_IntType(ISerializationContext context, IntType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=EString (signatures+=Signature signatures+=Signature*)?)
	 * </pre>
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     InternalAction returns InternalAction
	 *
	 * Constraint:
	 *     {InternalAction}
	 * </pre>
	 */
	protected void sequence_InternalAction(ISerializationContext context, InternalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=EString containers+=[Container|EString] containers+=[Container|EString]*)
	 * </pre>
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns ListType
	 *     ParameterType returns ListType
	 *     ListType returns ListType
	 *
	 * Constraint:
	 *     {ListType}
	 * </pre>
	 */
	protected void sequence_ListType(ISerializationContext context, ListType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns LongType
	 *     ParameterType returns LongType
	 *     LongType returns LongType
	 *
	 * Constraint:
	 *     type=ELongObject
	 * </pre>
	 */
	protected void sequence_LongType(ISerializationContext context, LongType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepositoryPackage.Literals.LONG_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepositoryPackage.Literals.LONG_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLongTypeAccess().getTypeELongObjectParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     {Loop}
	 * </pre>
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns MapType
	 *     ParameterType returns MapType
	 *     MapType returns MapType
	 *
	 * Constraint:
	 *     {MapType}
	 * </pre>
	 */
	protected void sequence_MapType(ISerializationContext context, MapType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString type=ParameterType)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, metaModel.viewType.repository.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ViewTypePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ViewTypePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RepositoryPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepositoryPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeParameterTypeParserRuleCall_4_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProvidedRole returns ProvidedRole
	 *
	 * Constraint:
	 *     (name=EString delegationConnector=[DelegationConnectorProvided|EString]? assemblyConnector=[AssemblyConnector|EString]?)
	 * </pre>
	 */
	protected void sequence_ProvidedRole(ISerializationContext context, ProvidedRole semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Repository returns Repository
	 *
	 * Constraint:
	 *     ((components+=Component components+=Component*)? (interface+=Interface interface+=Interface*)?)
	 * </pre>
	 */
	protected void sequence_Repository(ISerializationContext context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequiredRole returns RequiredRole
	 *
	 * Constraint:
	 *     (name=EString delegationConnector=[DelegationConnectorRequired|EString]? assemblyConnector=[AssemblyConnector|EString]?)
	 * </pre>
	 */
	protected void sequence_RequiredRole(ISerializationContext context, RequiredRole semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=EString returnType=Type (parameters+=Parameter parameters+=Parameter*)?)
	 * </pre>
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns StringType
	 *     ParameterType returns StringType
	 *     StringType returns StringType
	 *
	 * Constraint:
	 *     type=EString?
	 * </pre>
	 */
	protected void sequence_StringType(ISerializationContext context, StringType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (
	 *         provides+=[Interface|EString] 
	 *         provides+=[Interface|EString]* 
	 *         encapsulatedInstances+=AssemblyContext 
	 *         encapsulatedInstances+=AssemblyContext* 
	 *         (delegationConnectors+=DelegationConnector delegationConnectors+=DelegationConnector*)? 
	 *         (assemblyConnectors+=AssemblyConnector assemblyConnectors+=AssemblyConnector*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_System(ISerializationContext context, metaModel.viewType.assembly.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns VoidType
	 *     VoidType returns VoidType
	 *
	 * Constraint:
	 *     {VoidType}
	 * </pre>
	 */
	protected void sequence_VoidType(ISerializationContext context, VoidType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
