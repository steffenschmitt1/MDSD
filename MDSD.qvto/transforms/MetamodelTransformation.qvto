modeltype source uses "platform:/resource/MDSD/model/metamodel.ecore";
modeltype target uses "platform:/resource/MDSD.qvto/target/pcm.ecore";

transformation myTransformation(in sourceModel: source, out targetModel: target){
    main() {
        // no backlinks in this stage, linking later. Backlinks in mapping create cyclic dependencies.
        sourceModel.objectsOfType(source::viewType::repository::Repository)->map mapToPCM();
        
    }
    
    mapping source::viewType::repository::Repository::mapToPCM() : target::repository::Repository {
    	interfaces__Repository := self.interfaces -> map mapToPCM();
    }
    
    mapping source::viewType::repository::Interface::mapToPCM() : target::repository::InfrastructureInterface {
    	infrastructureSignatures__InfrastructureInterface := self.signatures -> map mapToPCM();
    }
    
    mapping source::viewType::repository::Signature::mapToPCM() : target::repository::InfrastructureSignature {
    	parameters__InfrastructureSignature = self.parameters -> map mapToPCM() -> asSet();
    }
    
    mapping source::viewType::repository::Parameter::mapToPCM() : target::repository::Parameter {
        switch {
        	//primitives
        	case(self.type.oclIsTypeOf(source::viewType::repository::StringType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::STRING;
        		};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::BooleanType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::BOOL;
        		};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::IntType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::INT;
        		};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::LongType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::LONG;
        		};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::FloatType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::DOUBLE;
        		};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::CharType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::CHAR;
        		};
        	}
        	// collections
        	case(self.type.oclIsTypeOf(source::viewType::repository::ListType)) {
        		dataType__Parameter := object target::repository::CollectionDataType {};
        	}
        	case(self.type.oclIsTypeOf(source::viewType::repository::MapType)) {
        		dataType__Parameter := object target::repository::CollectionDataType {};

        	}
        	// no date in palladio, use string
        	case(self.type.oclIsTypeOf(source::viewType::repository::DateType)) {
        		dataType__Parameter := object target::repository::PrimitiveDataType {
        			type := target::repository::PrimitiveTypeEnum::STRING;
        		};
        	}
        	// no void in palladio, use null
        	case(self.type.oclIsTypeOf(source::viewType::repository::VoidType)) {
        		dataType__Parameter := null;
        	}
        }
    	
    }
}